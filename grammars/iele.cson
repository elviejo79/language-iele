# If this is your first time writing a language grammar, check out:
#   - http://manual.macromates.com/en/language_grammars

scopeName: "source.iele"
name: "IELE"
fileTypes: [
  "iele"
]
patterns: [
  # comments
  ## Line comments
  {
    include: "#comments"
  }
  ## define
  {
    begin: "(?=(external|contract|define)\\s+)"
    end: "((?=#)|(?=//)|(?=\n)|(?=\\()|(?={))"
    comment: "Main keywords"
    patterns: [
      {
        match: "\\b(external|contract|define|public)\\b"
        captures:
          "1":
            name: "keyword.control"
      }
      # Contract name
      {
        match: "([@%]?)([A-Za-z0-9\\_\\-\\$\\.]+|\"[^\"]+?\")"
        captures:
          "1":
            name: "entity.name.function"
          "2":
            name: "entity.name.function"
      }
    ]
  }
  # variable 
  {
    include: "#variable"
  }
  # label
	{
		match: "\\b([A-Za-z0-9\\_\\-\\$\\.]+\\:)"
		name: "constant.other.basicblock"
	}
  # branch
  {
    begin: "\\s*(br)"
    beginCaptures:
      "0":
        "name": "keyword.control"
    end: "$"
    patterns: [
      {
        "include": "#variable"
      }
      {
        match: "\\b([A-Za-z0-9\\_\\-\\$\\.]+)"
    		name: "constant.other.basicblock"
      }
      {
        include: "#comments"
      }
    ]
  }
  # keywords
  {
    comment: "Language keywords"
    match: "\\b(ret|revert|define|public|br)\\b"
    name: "keyword.control"
  }
  # operator
  {
    comment: "Operator-1"
    match: "\\b(call|staticcall|at|load|store|sload|sstore|log|create|copycreate|selfdestruct|deposit|init|send|gaslimit)\\b"
    name: "keyword.operator"
  }
  {
    comment: "Operator-2"
    match:"\\b(iszero|not|add|sub|mul|div|exp|mod|addmod|mulmod|expmod|byte|sext|twos|and|or|xor|shift|cmp|lt|le|gt|ge|eq|ne|sha3)\\b"
    name: "keyword.operator"
  }
  # true and false
  {
    comment: "True and false keywords"
    match: "\\b(true|false)\\b"
    name: "constant.language"
  }
  # returns
  {
    comment: "Returns"
    match: "\\b(void)\\b"
    name: "constant.language"
  }
  # number
  {
    comment: "Numbers"
    match: "\\b(\\d+)\\b"
    name: "constant.numeric"
  }
  {
    comment: "Hexadecimal"
    match: "\\b(0[xX][a-fA-F0-9]+)\\b"
    name: "constant.numeric"
  }
]
repository:
  comments:
    patterns: [
      {
        begin: "//"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.line"
        end: "$"
        name: "comment.line.double-slash"
      }
      ## block comments
      {
        begin: "/\\*"
        beginCaptures:
          "0":
            name: "punctuation.definition.comment.begin"
        end: "\\*/"
        endCaptures:
          "0":
            "name": "punctuation.definition.comment.end"
        name: "comment.block"
      }
    ]
  variable:
    patterns: [{
      match: "([@%])([A-Za-z0-9\\_\\-\\$\\.]+|\"[^\"]+?\")",
      captures:
        "1":
          name: "variable.other"
        "2":
          name: "variable.other"
    }]

